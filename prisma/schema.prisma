// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model App {
  id String @id @default(cuid())
  title String
  description String @default("")
  language ISOLanguageCode @default(fr) // An iso language code
  status AppStatus @default(online)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AppStatus {
  online // Le site web est accessible et fonctionne correctement
  maintenance // Le site web est en cours de maintenance et n'est pas accessible aux utilisateurs
  offline //Le site web est temporairement inaccessible ou indisponible
}

enum ISOLanguageCode {
  fr
  en
}

model User {
  id String @id @default(cuid())
  username String @unique
  name String
  bio String @db.Text @default("")
  email String @unique
  phone String?
  avatar String?
  password String
  articles Article[]
  role Role @default(subscriber)
  verified Boolean @default(false)
  blocked Boolean @default(false)
  emailVerified DateTime?
  Session       Session[]
  Account       Account?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user User? @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

enum Role {
  subscriber // Can read and comment articles
  author // Can create articles
  editor // Can create and publish articles
  admin // Can create, publish, verify, block... users, articles, tags
  owner // Every thing
}

model Article {
  id String @id @default(cuid())
  title String @default("")
  slug String @unique
  description String @default("")
  content String @db.Text @default("")
  markdown String @db.Text @default("")
  imageUrl String @default("")
  authorId String
  author User @relation(fields: [authorId],references: [id])
  year Int @db.Year
  published Boolean @default(false)
  commentable Boolean @default(true)
  verified Boolean @default(true)
  blocked Boolean @default(false)
  tags ArticleTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("articles")
}

model ArticleTag {
  articleId String
  article Article @relation(fields: [articleId],references: [id], onDelete: Cascade)
  tagId String
  tag Tag @relation(fields: [tagId],references: [id])
  @@id([articleId,tagId])
  @@map("article_tags")
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  description String? @default("")
  imageUrl String?
  published Boolean @default(true)
  verified Boolean @default(true)
  articles ArticleTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("tags")
}